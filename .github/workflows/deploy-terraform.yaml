## This is a basic workflow to help you get started with Actions

## Warning: The following GitHub Secrets must be configured for this GitHub Action to work
##          AWS_ACCESS_KEYPAIR, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY
##          AWS_DEFAULT_ACCOUNT, AWS_DEFAULT_PROFILE, AWS_DEFAULT_REGION
##          AWS_DEPLOY_TERRAFORM, AWS_DESTROY_TERRAFORM, INSPECT_DEPLOYMENT
##          DEVOPS_ACCESS_POLICY, DEVOPS_ACCESS_ROLE, DEVOPS_USER_IAMID
##          UPDATE_PYTHON_LATEST, UPDATE_SYSTEM_LATEST

name: GitHub Actions - Terraform

on:

  workflow_dispatch:
    name: 'Manual Deployment'
    description: 'Triggering Manual Deployment'
    inputs:
      workspace:
        description: 'Target Workspace'
        required: false
        default: 'dev'
      region:
        description: 'Target Region'
        required: false
        default: '?'
      account:
        description: 'Target Account'
        required: false
        default: '?'
      accesskey:
        description: 'Access Key-ID'
        required: false
        default: '?'
      secretkey:
        description: 'Secret Access-Key'
        required: false
        default: '?'
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Deploy Terraform'

  push:
    branches: [ master ]
##    paths-ignore:
##      - '.github/**'
##      - '*.md'
    paths:
      - workspace
      # - '*.tf'
      # - '*.tfvars'

jobs:
  
  validate:

    env:

      terraform_deploy: ${{ secrets.AWS_DEPLOY_TERRAFORM }}
      terraform_destroy: ${{ secrets.AWS_DESTROY_TERRAFORM }}
      terraform_tfstate: ${GITHUB_WORKSPACE}/terraform.tfstate.d
      terraform_planfile: terraform

      inspect_deployment: ${{ secrets.INSPECT_DEPLOYMENT }}

      update_system: ${{ secrets.UPDATE_SYSTEM_LATEST }}
      update_python: ${{ secrets.UPDATE_PYTHON_LATEST }}

      AWS_DEFAULT_PROFILE: default
      AWS_DEFAULT_ACCOUNT: ${{ secrets.AWS_DEFAULT_ACCOUNT }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      DEVOPS_ACCESS_ROLE: ${{ secrets.DEVOPS_ACCESS_ROLE }}

    ## The type of runner that the job will run on
    ## self-hosted runners seem to be limited queued one/run at a time
    runs-on: ubuntu-latest

    ## Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    ## Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    ## Environment Variables
    - name: Exporting Variables
      id: export_variables
      run: |
        echo -e "Exporting AWS Shared-Credentials File:";
        eval "echo '::set-env name=TARGET_WORKSPACE::$(cat ${GITHUB_WORKSPACE}/workspace | grep -vxE '[[:blank:]]*([#;].*)?' | tr -d "[:space:]")'";
        eval "echo '::set-env name=AWS_SHARED_CREDENTIALS_FILE::${GITHUB_WORKSPACE}/access/credentials'";
        eval "echo '::set-env name=SESSIONNAME_TIMESTAMP::TerraformPipeline--$(date +"%Y%m%d%H%M%S")'";
        echo '::set-env name=DEVOPS_ACCESS_ROLE::${{ env.DEVOPS_ACCESS_ROLE }}';
        echo '::set-env name=AWS_DEFAULT_PROFILE::${{ env.AWS_DEFAULT_PROFILE }}';
        echo '::set-env name=AWS_DEFAULT_REGION::${{ secrets.AWS_DEFAULT_REGION }}';
        echo '::set-env name=DEVOPS_USER_IAMID::${{ secrets.DEVOPS_USER_IAMID }}';

    ## Environment Variables
    - name: Environment Variables
      id: environment_variables
      run: |
        echo -e "Processing File|Input-based Parameters ...";
        custom_workspace="${{ github.event.inputs.workspace }}";
        ## echo -e "\nInput Custom Workspace: '${custom_workspace}'";
        if [[ (${#custom_workspace} -gt 0) && (${custom_workspace} != '?') ]]; then
          ## echo -e "Target Workspace [input-based]: '${custom_workspace}'";
          eval "echo '::set-env name=TARGET_WORKSPACE::${custom_workspace}'";
        fi;
        cloud_region="${{ github.event.inputs.region }}";
        ## echo -e "\nInput Cloud Region: '${cloud_region}'";
        if [[ (${#cloud_region} -gt 0 ) && (${cloud_region} != '?') ]]; then
          ## echo "Cloud Region [input-based]: '${cloud_region}'";
          eval "echo '::set-env name=AWS_DEFAULT_REGION::${cloud_region}'";
        fi;
        cloud_account="${{ github.event.inputs.account }}";
        ## echo -e "\nInput Cloud Account: '${cloud_account}'";
        if [[ (${#cloud_account} -gt 0 ) && (${cloud_account} != '?') ]]; then
          ## echo "Cloud Account [input-based]: '${cloud_account}'";
          eval "echo '::set-env name=AWS_DEFAULT_ACCOUNT::${cloud_account}'";
        fi;
        access_keyid="${{ github.event.inputs.accesskey }}";
        ## echo -e "\nInput Access Key-ID: '${access_keyid}'";
        if [[ (${#access_keyid} -gt 0 ) && (${access_keyid} != '?') ]]; then
          ## echo "Access Key-ID [input-based]: '${access_keyid}'";
          eval "echo '::set-env name=AWS_ACCESS_KEY_ID::${access_keyid}'";
        fi;
        secret_keyid="${{ github.event.inputs.secretkey }}";
        ## echo -e "\nInput Secret Key-ID: '${secret_keyid}'";
        if [[ (${#secret_keyid} -gt 0 ) && (${secret_keyid} != '?') ]]; then
          ## echo "Secret Key-ID [input-based]: '${secret_keyid}'";
          eval "echo '::set-env name=AWS_SECRET_ACCESS_KEY::${secret_keyid}'";
        fi;

    ## Operating System
    - name: Operating System
      if: env.update_system == 'true'
      id: operating_system
      run: |
        echo -e "Updating/Upgrading Operating System ...";
        sudo apt-get update -y;
        sudo apt-get install -y lsb-release;
        lsb_release -a;

    ## Upgrading Python
    - name: Upgrading Python
      if: env.update_python == 'true'
      id: upgrade_python
      run: |
        echo -e "Re-Linking Python (latest: 3.6) ...";
        ## python --version; ## Python 2.7
        cd /usr/bin;
        sudo ln -fs python3.6 python;
        python --version;

    ## Installing Toolset
    - name: Installing Toolset
      id: intall_toolset
      run: |
        echo -e "Installing DevOps Tools ...";
        ## Objective: Create a stage for future custom scripts (wrappers).
        sudo apt-get install -y jq tree &>/dev/null;

    ## Updating AWS CLI (latest)
    - name: Updating AWS CLI (lastest)
      id: update_awscli
      env:
        awscli_download: awscli.amazonaws.com
        awscli_platform: linux-x86_64
        awscli_package: awscli-exe-linux-x86_64.zip
      run: |
        aws --version >/dev/null 2>&1 && {
            echo -e >&2 "AWS CLI is Installed ... Ok! ";
            aws --version;
          };
        echo -e "Upgrading AWS-CLI to version 2.0.40";
        ## https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html
        cd /tmp;
        wget --quiet "https://${{ env.awscli_download }}/${{ env.awscli_package }}" \
             --directory-prefix=/tmp/ --output-document=awscliv2.zip;
        unzip awscliv2.zip 1>/dev/null;
        ls -l /usr/local/bin/aws;
        sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update;

    ## Inspecting AWS CLI Version
    - name: Inpsecting AWS CLI Version
      id: inspect_awscli
      run: |
        aws --version;

    ## General Credentials
    - name: Generate Credentials
      id: generate_credentials
      run: |
        declare -a credentials=(
            aws_access_key_id~${AWS_ACCESS_KEY_ID}
            aws_secret_access_key~${AWS_SECRET_ACCESS_KEY}
          );
        ## echo -e "\nDefault Credentials:\n${credentials[@]}";
        echo -e "\nInjecting Default User-Credentials into AWS-Credentials file! \n";
        for credential in ${credentials[@]}; do
          echo -e "Injecting Default User-Credential: ${credential%\~*} = ${credential#*\~} ...";
          sed -i -e "s|^\(${credential%\~*}\)\( =\)\(.*\)$|\1\2 ${credential#*\~}|g" ${AWS_SHARED_CREDENTIALS_FILE} ;
        done;
        ## echo -e "\nDisplay Default User-Credentails (file):";
        ## cat ${AWS_SHARED_CREDENTIALS_FILE} ;
        echo -e "\nInitiating STS Assume Role request ...";
        declare -a session_token=($(
            aws --profile ${AWS_DEFAULT_PROFILE} \
                --region ${AWS_DEFAULT_REGION} \
                sts assume-role \
                --role-arn arn:aws:iam::${AWS_DEFAULT_ACCOUNT}:role/${DEVOPS_ACCESS_ROLE} \
                --role-session-name "${SESSIONNAME_TIMESTAMP}" \
                --query 'Credentials.{aki:AccessKeyId,sak:SecretAccessKey,stk:SessionToken,sts:Expiration}' \
                --output text
             ));
        echo -e "Fetched STS Assumed Role Values:";
        ## echo -e "Session Token:\n${session_token[@]}";
        declare -a session_items=(AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_TOKEN_EXPIRES);
        ## echo -e "\nConstructed Session Items [array]:\n${session_items[@]}\n";
        counter=0; for xkey in "${session_token[@]}"; do
          ## eval "export ${session_items[$((counter++))]}=${xkey}";
          ## echo -e "Exporting Session Variables: ${session_items[${counter}]} = ${xkey}";
          eval "echo '::set-env name=${session_items[$((counter++))]}::${xkey}'";
        done;

    ## Inspect Credentials
    - name: Inspecting User Credentials
      id: inspect_credentials
      run: |
        echo ::add-mask::${DEVOPS_USER_IAMID};
        echo -e "Obtaining STS Caller Identity (First-Time)";
        aws --profile ${AWS_DEFAULT_PROFILE} \
            --region ${AWS_DEFAULT_REGION} \
            sts get-caller-identity ;

    ## DevOps Assume-Role
    - name: DevOps Assume-Role
      id: devops_assumerole
      run: |
        declare -a credentials=(
            aws_access_key_id~${AWS_ACCESS_KEY_ID}
            aws_secret_access_key~${AWS_SECRET_ACCESS_KEY}
            aws_session_token~${AWS_SESSION_TOKEN}
            x_principal_arn~arn:aws:iam::${AWS_DEFAULT_ACCOUNT}:user/terraform
            x_security_token_expires~${AWS_TOKEN_EXPIRES}
          );
        ## echo -e "Displaying Latest Credentials:\n${credentials[@]}\n";
        for credential in ${credentials[@]}; do
          ## echo -e "Injecting Latest Credential:\n${credential%\~*} = ${credential#*\~} ...";
          sed -i -e "s|^\(${credential%\~*}\)\( =\)\(.*\)$|\1\2 ${credential#*\~}|g" ${AWS_SHARED_CREDENTIALS_FILE} ;
        done;

    ## Confirm Credentials
    - name: Confirming User Credentials
      id: confirm_credentials
      run: |
        echo -e "Obtaining Caller Identity (Second-Time)";
        aws --profile ${AWS_DEFAULT_PROFILE} \
            --region ${AWS_DEFAULT_REGION} \
            sts get-caller-identity ;

    ## Display Environment
    - name: Display Environment
      id: display_environment
      if: env.display_environment == 'true'
      run: |
        echo -e "Displaying Enviroment Settings ...";
        echo -e "Terraform Workspace: ${TARGET_WORKSPACE} ";
        echo -e "Terraform Cloud-Region: ${AWS_DEFAULT_REGION} \n";
        echo -e "AWS Target Account: ${AWS_DEFAULT_ACCOUNT}"
        echo -e "AWS Access Key-ID: ${AWS_ACCESS_KEY_ID}";
        echo -e "AWS Secret Access Key: ${AWS_SECRET_ACCESS_KEY}";
        echo -e "AWS Session Token: ${AWS_SESSION_TOKEN}";

    ## Validating AWS CLI
    - name: Validating AWS CLI
      id: validate_awscli
      run: |
        ## echo -e "Listing Current Credentials Configurations ...";
        ## cat ${AWS_SHARED_CREDENTIALS_FILE} ;
        aws configure list;
        echo ::add-mask::${DEVOPS_USER_IAMID};
        echo -e "\nListing IAM Users (Assumed-Role):";
        aws --profile ${AWS_DEFAULT_PROFILE} \
            --region ${AWS_DEFAULT_REGION} \
            iam list-users \
            --query 'Users[?UserName==`terraform`]';

    ## Downloading Terraform
    - name: Downloading Terraform
      id: download_terraform
      env:
        terraform_version: 0.12.29
        terraform_download: releases.hashicorp.com/terraform
        terraform_platform: linux_amd64
        terraform_package: terraform_${{ env.terraform_version }}_${{ env.terraform_platform }}.zip
      run:                                                       |
        terraform --version >/dev/null 2>&1 && {
            echo -e >&2 "HashiCorp Terraform is Installed ... Ok! ";
            which terraform;
          } || {
            wget --quiet https://${{ env.terraform_download }}/${{ env.terraform_version }}/${{ env.terraform_package }} -P /tmp/;
            unzip /tmp/${{ env.terraform_package }};
            chmod 0754 ./terraform;
            sudo mv ./terraform /usr/local/bin/;
          };

    ## Inspecting Terraform Version
    - name: Inpsecting Terraform Version
      id: inspect_tterraform
      run: |
        terraform --version;

    ## Initializing Terraform
    - name: Initializing Terraform
      id: initialize_terraform
      run: |
        terraform init;

    ## Terraform Workspace
    - name: Terraform Workspace
      id: terraform_workspace
      run: |
        terraform workspace new ${TARGET_WORKSPACE};

    ## Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Formatting-Check
      id: terraform_formatting
      run: |
        TF_LOG=TRACE terraform fmt -check;

    ## Validating & Testing Terraform
    - name: Validating & Testing Terraform
      id: validate_terraform
      run: |
        terraform validate;

    ## ## Generating Terraform Plan
    - name: Generating Terraform Plan
      id: generate_tfplan
      run: |
        terraform_tfplan="${{ env.terraform_tfstate }}/${TARGET_WORKSPACE}/${{ env.terraform_planfile }}.tfplan";
        echo "Terraform Output Plan: ${terraform_tfplan}";
        export TF_VAR_region="${AWS_DEFAULT_REGION}";
        terraform plan -out "${terraform_tfplan}";

    ## Applying Terraform Plan
    - name: Applying Terraform Plan
      id: apply_tfplan
      env:
        awscli_keypair: ${GITHUB_WORKSPACE}/access/keypair
      if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request' && env.terraform_deploy == 'true'
      run: |
        echo -en "${{ secrets.AWS_ACCESS_KEYPAIR }}" > ${{ env.awscli_keypair }};
        ls -al ${{ env.awscli_keypair }};
        terraform_tfplan="${{ env.terraform_tfstate }}/${TARGET_WORKSPACE}/${{ env.terraform_planfile }}.tfplan";
        echo "Terraform Input Plan: ${terraform_tfplan}";
        export TF_VAR_region="${AWS_DEFAULT_REGION}";
        terraform apply -input=false ${terraform_tfplan};

    ## Inspecting Elastic LoadBalancer
    - name: Inspecting Elastic LoadBalancer
      id: inspect_awselb
      if: env.terraform_deploy == 'true' && env.inspect_deployment == 'true'
      run: |
        loadbalancer_index="${TARGET_WORKSPACE}-nginx-elb-$(terraform output resources_index)";
        eval "echo '::set-env name=target_loadbalancer::${loadbalancer_index}'";
        paused=5;
        time {
            while [[
                `aws --profile ${AWS_DEFAULT_PROFILE} \
                     --region ${AWS_DEFAULT_REGION} \
                     elb describe-instance-health \
                     --load-balancer-name ${loadbalancer_index} \
                     --query InstanceStates[].State \
                     --output text \
                 | sed -e 's/InService//g' -e 's/\([[:blank:]]\)\{1,\}//' \
                 | egrep -c "OutOfService|Unknown" 2>/dev/null` -gt 0
              ]]; do
              sleep ${paused};
            done;
          }; sleep ${paused};

    ## Evaluating Elastic LoadBalancer
    ## HTTP/1.1 200 OK
    ## Accept-Ranges: bytes
    ## Content-Length: 294
    ## Content-Type: text/html
    ## Date: Sun, 16 Aug 2020 23:56:39 GMT
    ## ETag: "5f39c185-126"
    ## Last-Modified: Sun, 16 Aug 2020 23:30:13 GMT
    ## Server: nginx/1.16.1
    ## Connection: keep-alive
    - name: Evaluating Elastic LoadBalancer
      id: evaluate_elasticloadbalancer
      if: env.terraform_deploy == 'true' && env.inspect_deployment == 'true'
      run: |
        echo -e "Fetching Elastic Load Balancer Public-IPs ...";
        declare -a loadbalancer_publicips=($(
            aws --profile ${AWS_DEFAULT_PROFILE} \
                --region ${AWS_DEFAULT_REGION} \
                ec2 describe-network-interfaces \
                --filters Name=description,Values="ELB ${target_loadbalancer}" \
                --query 'NetworkInterfaces[*].Association.PublicIp' \
                --output text
          ));
        loadbalancer_publicip="${loadbalancer_publicips[0]}";
        ## echo -e "Target Service: '${target_loadbalancer}' [${loadbalancer_publicip}]\n";
        ## curl -v --head http://${loadbalancer_publicip} 2>/dev/null;
        loadbalancer_dnsname="$(host ${loadbalancer_publicip} | cut -d ' ' -f5)";
        echo -e "Target Service: ${loadbalancer_dnsname}\n";
        curl -v --head http://${loadbalancer_dnsname} 2>/dev/null;
        ## Warning: Discarding this option (not efficient)
        ## declare -a loadbalancer_publicdns=($(
        ##     aws --profile ${AWS_DEFAULT_PROFILE} \
        ##         --region ${AWS_DEFAULT_REGION} \
        ##         elb describe-load-balancers \
        ##         --load-balancer-name ${target_loadbalancer} \
        ##         --query 'LoadBalancerDescriptions[].DNSName' \
        ##         --output text
        ##   ));
        ## declare -a loadbalancer_publicips=($(
        ##     host ${loadbalancer_publicdns} | cut -d ' ' -f4
        ##   ));
        ## if [[ ${#loadbalancer_publicips[@]} -gt 0 ]]; then
        ##   echo -e "\nTarget Service: '${loadbalancer_publicips[0]}'\n";
        ##   curl -v --head http://${loadbalancer_publicips[0]} 2>/dev/null;
        ## fi;

    ## Describing Elastic LoadBalancer
    - name: Describing Elastic LoadBalancer
      id: describe_awselb
      if: env.terraform_deploy == 'true' && env.inspect_deployment == 'true'
      run: |
        echo -e "Describing Elastic Load Balancer configuration:";
        aws --profile ${AWS_DEFAULT_PROFILE} \
            --region ${AWS_DEFAULT_REGION} \
            elb describe-load-balancers \
            --load-balancer-name ${target_loadbalancer};

    ## Displaying Terraform Configuration
    - name: Displaying Terraform Configuration
      id: display_terraform
      if: env.terraform_deploy == 'true'
      run: |
        terraform show | tee ${{ env.terraform_tfstate }}/${TARGET_WORKSPACE}/terraform.show;

    ## Uploading Terraform Plan
    - name: Uploading Terraform Plan
      id: upload_terraform
      env:
        terraform_s3bucket: terraform-states-${AWS_DEFAULT_ACCOUNT}
      if: env.terraform_deploy == 'true' && env.inspect_deployment == 'true'
      run: |
        target_tfstate="${{ env.terraform_tfstate }}/${TARGET_WORKSPACE}";
        target_buildset="${target_tfstate}/build-$(terraform output resources_index)";
        mkdir -pv ${target_buildset};
        cp -v ${target_tfstate}/{*.tfstate,*.show,*.tfplan} ${target_buildset}/ 2>/dev/null;
        s3bucket_remotepath="${TARGET_WORKSPACE}/build-$(terraform output resources_index)";
        echo -e "\nTransferring Terraform State @ Local-Storage ... ${{ env.terraform_s3bucket }}";
        aws --profile ${AWS_DEFAULT_PROFILE} \
            --region ${AWS_DEFAULT_REGION} \
            s3 cp ${target_buildset} s3://${{ env.terraform_s3bucket }}/${s3bucket_remotepath}/ \
            --recursive &>/dev/null ;
        echo -e "\nListing Terraform State @ AWS S3 Bucket ... ${{ env.terraform_s3bucket }}";
        aws --profile ${AWS_DEFAULT_PROFILE} \
            --region ${AWS_DEFAULT_REGION} \
            s3 ls s3://${{ env.terraform_s3bucket }} \
            --recursive ;

    ## Listing Terraform System State
    - name: Listing Terraform System State
      id: terraform_state
      ## if: env.terraform_deploy == 'true' && env.inspect_deployment == 'true'
      run: |
        tree ${{ env.terraform_tfstate }};
        target_state="$(find ${{ env.terraform_tfstate }} -type f -name terraform.tfstate | head -n1)";
        echo -e "\nDisplaying Terraform State: ${target_state}";
        cat ${target_state};

    ## Destroying Terraform Plan
    - name: Destroying Terraform Plan
      id: destroy_terraform
      if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request' && env.terraform_deploy == 'true' && env.terraform_destroy == 'true'
      run: |
        export TF_VAR_region="${AWS_DEFAULT_REGION}";
        terraform destroy -auto-approve;
